
stopWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000008dc  00000970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800062  00800062  00000972  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  00000974  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008ac  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_1>
   8:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_2>
   c:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 b1 03 	jmp	0x762	; 0x762 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
uint8_t state = 1;//1--> up...0-->down//counting state
uint8_t ON_OFF = 0;//timer on and off state
uint8_t pressFlags[4]={0};//flags to control 4 push buttons with no interrupts
uint8_t time_SEL = 0;//time select to control which time sector is being modified
int main(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	sevSeg_Init();//time display init
  9a:	0e 94 88 02 	call	0x510	; 0x510 <sevSeg_Init>
	sevSeg_scnd_Init();//state display init
  9e:	0e 94 a4 02 	call	0x548	; 0x548 <sevSeg_scnd_Init>
	initPushB();//control push buttons initiation
  a2:	0e 94 a0 01 	call	0x340	; 0x340 <initPushB>
	initExtInt();//external interrupts initiation
  a6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <initExtInt>
	t0_Init();//timer 0 initiation for clock control
  aa:	0e 94 14 04 	call	0x828	; 0x828 <t0_Init>
	t1_Init();//timer 1 initiation for delay function
  ae:	0e 94 8b 03 	call	0x716	; 0x716 <t1_Init>
	displaySeg2(state+1);//display up arrow for an initial state of counting up
  b2:	80 91 60 00 	lds	r24, 0x0060
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	0e 94 46 03 	call	0x68c	; 0x68c <displaySeg2>
	while(1)
	{
		display();//always display time
  bc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <display>
		if(!ON_OFF)//when pause start checking for our control push buttons
  c0:	80 91 65 00 	lds	r24, 0x0065
  c4:	88 23       	and	r24, r24
  c6:	d1 f7       	brne	.-12     	; 0xbc <main+0x2a>
		{
			if(!(PINB & (1<<PB3)))//switch mode (up counting or down counting)
  c8:	e6 e3       	ldi	r30, 0x36	; 54
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	88 2f       	mov	r24, r24
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	88 70       	andi	r24, 0x08	; 8
  d4:	90 70       	andi	r25, 0x00	; 0
  d6:	00 97       	sbiw	r24, 0x00	; 0
  d8:	f9 f4       	brne	.+62     	; 0x118 <main+0x86>
			{
				delayms(3);//for de-bounce
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	0e 94 29 04 	call	0x852	; 0x852 <delayms>
				if(!(PINB & (1<<PB3))&&!pressFlags[0])
  e0:	e6 e3       	ldi	r30, 0x36	; 54
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	88 2f       	mov	r24, r24
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	88 70       	andi	r24, 0x08	; 8
  ec:	90 70       	andi	r25, 0x00	; 0
  ee:	00 97       	sbiw	r24, 0x00	; 0
  f0:	a9 f4       	brne	.+42     	; 0x11c <main+0x8a>
  f2:	80 91 66 00 	lds	r24, 0x0066
  f6:	88 23       	and	r24, r24
  f8:	89 f4       	brne	.+34     	; 0x11c <main+0x8a>
				{
					pressFlags[0] = 1;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 66 00 	sts	0x0066, r24
					state^=1;//switch counting state
 100:	90 91 60 00 	lds	r25, 0x0060
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	89 27       	eor	r24, r25
 108:	80 93 60 00 	sts	0x0060, r24
					displaySeg2(state+1);//display new state arrow
 10c:	80 91 60 00 	lds	r24, 0x0060
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	0e 94 46 03 	call	0x68c	; 0x68c <displaySeg2>
 116:	02 c0       	rjmp	.+4      	; 0x11c <main+0x8a>
				}
			}
			else
				pressFlags[0] = 0;
 118:	10 92 66 00 	sts	0x0066, r1


			if (!(PINB & (1 << PB4))) //time select (select which time(seconds,minutes,hours) to be controlled by the increase and decrease buttons)
 11c:	e6 e3       	ldi	r30, 0x36	; 54
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	88 2f       	mov	r24, r24
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	80 71       	andi	r24, 0x10	; 16
 128:	90 70       	andi	r25, 0x00	; 0
 12a:	00 97       	sbiw	r24, 0x00	; 0
 12c:	f9 f4       	brne	.+62     	; 0x16c <main+0xda>
			{
				delayms(3);
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	0e 94 29 04 	call	0x852	; 0x852 <delayms>
				if (!(PINB & (1 << PB4)) && !pressFlags[1])
 134:	e6 e3       	ldi	r30, 0x36	; 54
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	88 2f       	mov	r24, r24
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	80 71       	andi	r24, 0x10	; 16
 140:	90 70       	andi	r25, 0x00	; 0
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	a9 f4       	brne	.+42     	; 0x170 <main+0xde>
 146:	80 91 67 00 	lds	r24, 0x0067
 14a:	88 23       	and	r24, r24
 14c:	89 f4       	brne	.+34     	; 0x170 <main+0xde>
				{
					pressFlags[1] = 1;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 67 00 	sts	0x0067, r24
					time_SEL++;
 154:	80 91 6a 00 	lds	r24, 0x006A
 158:	8f 5f       	subi	r24, 0xFF	; 255
 15a:	80 93 6a 00 	sts	0x006A, r24
					if(time_SEL>2)//loop back to seconds when switching of hours
 15e:	80 91 6a 00 	lds	r24, 0x006A
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	28 f0       	brcs	.+10     	; 0x170 <main+0xde>
						time_SEL=0;
 166:	10 92 6a 00 	sts	0x006A, r1
 16a:	02 c0       	rjmp	.+4      	; 0x170 <main+0xde>
				}
			}
			else
				pressFlags[1] = 0;
 16c:	10 92 67 00 	sts	0x0067, r1


			if (!(PINB & (1 << PB5))) //increase
 170:	e6 e3       	ldi	r30, 0x36	; 54
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	88 2f       	mov	r24, r24
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	80 72       	andi	r24, 0x20	; 32
 17c:	90 70       	andi	r25, 0x00	; 0
 17e:	00 97       	sbiw	r24, 0x00	; 0
 180:	09 f0       	breq	.+2      	; 0x184 <main+0xf2>
 182:	41 c0       	rjmp	.+130    	; 0x206 <main+0x174>
			{
				delayms(3);
 184:	83 e0       	ldi	r24, 0x03	; 3
 186:	0e 94 29 04 	call	0x852	; 0x852 <delayms>
				if (!(PINB & (1 << PB5)) && !pressFlags[2])
 18a:	e6 e3       	ldi	r30, 0x36	; 54
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	88 2f       	mov	r24, r24
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	80 72       	andi	r24, 0x20	; 32
 196:	90 70       	andi	r25, 0x00	; 0
 198:	00 97       	sbiw	r24, 0x00	; 0
 19a:	b9 f5       	brne	.+110    	; 0x20a <main+0x178>
 19c:	80 91 68 00 	lds	r24, 0x0068
 1a0:	88 23       	and	r24, r24
 1a2:	99 f5       	brne	.+102    	; 0x20a <main+0x178>
				{
					pressFlags[2] = 1;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	80 93 68 00 	sts	0x0068, r24
					time[time_SEL]++;
 1aa:	80 91 6a 00 	lds	r24, 0x006A
 1ae:	28 2f       	mov	r18, r24
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	f9 01       	movw	r30, r18
 1b4:	ee 59       	subi	r30, 0x9E	; 158
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	80 81       	ld	r24, Z
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	f9 01       	movw	r30, r18
 1be:	ee 59       	subi	r30, 0x9E	; 158
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	80 83       	st	Z, r24
					if(time_SEL==0&&(time[0]>59))//make sure no overflows
 1c4:	80 91 6a 00 	lds	r24, 0x006A
 1c8:	88 23       	and	r24, r24
 1ca:	39 f4       	brne	.+14     	; 0x1da <main+0x148>
 1cc:	80 91 62 00 	lds	r24, 0x0062
 1d0:	8c 33       	cpi	r24, 0x3C	; 60
 1d2:	1c f0       	brlt	.+6      	; 0x1da <main+0x148>
						time[0]=0;
 1d4:	10 92 62 00 	sts	0x0062, r1
 1d8:	18 c0       	rjmp	.+48     	; 0x20a <main+0x178>
					else if(time_SEL==1&&(time[1]>59))
 1da:	80 91 6a 00 	lds	r24, 0x006A
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	39 f4       	brne	.+14     	; 0x1f0 <main+0x15e>
 1e2:	80 91 63 00 	lds	r24, 0x0063
 1e6:	8c 33       	cpi	r24, 0x3C	; 60
 1e8:	1c f0       	brlt	.+6      	; 0x1f0 <main+0x15e>
						time[1]=0;
 1ea:	10 92 63 00 	sts	0x0063, r1
 1ee:	0d c0       	rjmp	.+26     	; 0x20a <main+0x178>
					else if(time_SEL==2&&(time[2]>99))
 1f0:	80 91 6a 00 	lds	r24, 0x006A
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	49 f4       	brne	.+18     	; 0x20a <main+0x178>
 1f8:	80 91 64 00 	lds	r24, 0x0064
 1fc:	84 36       	cpi	r24, 0x64	; 100
 1fe:	2c f0       	brlt	.+10     	; 0x20a <main+0x178>
						time[2]=0;
 200:	10 92 64 00 	sts	0x0064, r1
 204:	02 c0       	rjmp	.+4      	; 0x20a <main+0x178>
				}
			}
			else
				pressFlags[2] = 0;
 206:	10 92 68 00 	sts	0x0068, r1


			if (!(PINB & (1 << PB6))) //decrease
 20a:	e6 e3       	ldi	r30, 0x36	; 54
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	88 2f       	mov	r24, r24
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	80 74       	andi	r24, 0x40	; 64
 216:	90 70       	andi	r25, 0x00	; 0
 218:	00 97       	sbiw	r24, 0x00	; 0
 21a:	09 f0       	breq	.+2      	; 0x21e <main+0x18c>
 21c:	48 c0       	rjmp	.+144    	; 0x2ae <main+0x21c>
			{
				delayms(3);
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	0e 94 29 04 	call	0x852	; 0x852 <delayms>
				if (!(PINB & (1 << PB6)) && !pressFlags[3])//make sure no overflows
 224:	e6 e3       	ldi	r30, 0x36	; 54
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	88 2f       	mov	r24, r24
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	80 74       	andi	r24, 0x40	; 64
 230:	90 70       	andi	r25, 0x00	; 0
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	09 f0       	breq	.+2      	; 0x238 <main+0x1a6>
 236:	42 cf       	rjmp	.-380    	; 0xbc <main+0x2a>
 238:	80 91 69 00 	lds	r24, 0x0069
 23c:	88 23       	and	r24, r24
 23e:	09 f0       	breq	.+2      	; 0x242 <main+0x1b0>
 240:	3d cf       	rjmp	.-390    	; 0xbc <main+0x2a>
				{
					pressFlags[3] = 1;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 69 00 	sts	0x0069, r24
					time[time_SEL]--;
 248:	80 91 6a 00 	lds	r24, 0x006A
 24c:	28 2f       	mov	r18, r24
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	f9 01       	movw	r30, r18
 252:	ee 59       	subi	r30, 0x9E	; 158
 254:	ff 4f       	sbci	r31, 0xFF	; 255
 256:	80 81       	ld	r24, Z
 258:	81 50       	subi	r24, 0x01	; 1
 25a:	f9 01       	movw	r30, r18
 25c:	ee 59       	subi	r30, 0x9E	; 158
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	80 83       	st	Z, r24
					if(time_SEL==0&&time[0]<0)
 262:	80 91 6a 00 	lds	r24, 0x006A
 266:	88 23       	and	r24, r24
 268:	41 f4       	brne	.+16     	; 0x27a <main+0x1e8>
 26a:	80 91 62 00 	lds	r24, 0x0062
 26e:	88 23       	and	r24, r24
 270:	24 f4       	brge	.+8      	; 0x27a <main+0x1e8>
						time[0]=59;
 272:	8b e3       	ldi	r24, 0x3B	; 59
 274:	80 93 62 00 	sts	0x0062, r24
 278:	21 cf       	rjmp	.-446    	; 0xbc <main+0x2a>
					else if(time_SEL==1&&time[1]<0)
 27a:	80 91 6a 00 	lds	r24, 0x006A
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	41 f4       	brne	.+16     	; 0x292 <main+0x200>
 282:	80 91 63 00 	lds	r24, 0x0063
 286:	88 23       	and	r24, r24
 288:	24 f4       	brge	.+8      	; 0x292 <main+0x200>
						time[1]=59;
 28a:	8b e3       	ldi	r24, 0x3B	; 59
 28c:	80 93 63 00 	sts	0x0063, r24
 290:	15 cf       	rjmp	.-470    	; 0xbc <main+0x2a>
					else if(time_SEL==2&&time[2]<0)
 292:	80 91 6a 00 	lds	r24, 0x006A
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	09 f0       	breq	.+2      	; 0x29c <main+0x20a>
 29a:	10 cf       	rjmp	.-480    	; 0xbc <main+0x2a>
 29c:	80 91 64 00 	lds	r24, 0x0064
 2a0:	88 23       	and	r24, r24
 2a2:	0c f0       	brlt	.+2      	; 0x2a6 <main+0x214>
 2a4:	0b cf       	rjmp	.-490    	; 0xbc <main+0x2a>
						time[2]=99;
 2a6:	83 e6       	ldi	r24, 0x63	; 99
 2a8:	80 93 64 00 	sts	0x0064, r24
 2ac:	07 cf       	rjmp	.-498    	; 0xbc <main+0x2a>
				}
			}
			else
				pressFlags[3] = 0;
 2ae:	10 92 69 00 	sts	0x0069, r1
 2b2:	04 cf       	rjmp	.-504    	; 0xbc <main+0x2a>

000002b4 <initExtInt>:
 *      Author: omart
 */

#include "pushB.h"
void initExtInt(void)
{
 2b4:	df 93       	push	r29
 2b6:	cf 93       	push	r28
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
	DDRD &= ~((1<<PD2)|(1<<PD3));
 2bc:	a1 e3       	ldi	r26, 0x31	; 49
 2be:	b0 e0       	ldi	r27, 0x00	; 0
 2c0:	e1 e3       	ldi	r30, 0x31	; 49
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	83 7f       	andi	r24, 0xF3	; 243
 2c8:	8c 93       	st	X, r24
	PORTD |= 1<<PD2;
 2ca:	a2 e3       	ldi	r26, 0x32	; 50
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
 2ce:	e2 e3       	ldi	r30, 0x32	; 50
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	84 60       	ori	r24, 0x04	; 4
 2d6:	8c 93       	st	X, r24
	DDRB &= ~(1<<PB2);
 2d8:	a7 e3       	ldi	r26, 0x37	; 55
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	e7 e3       	ldi	r30, 0x37	; 55
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	8b 7f       	andi	r24, 0xFB	; 251
 2e4:	8c 93       	st	X, r24
	PORTB |= 1<<PB2;
 2e6:	a8 e3       	ldi	r26, 0x38	; 56
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	e8 e3       	ldi	r30, 0x38	; 56
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	84 60       	ori	r24, 0x04	; 4
 2f2:	8c 93       	st	X, r24

	SREG |= 1<<7;
 2f4:	af e5       	ldi	r26, 0x5F	; 95
 2f6:	b0 e0       	ldi	r27, 0x00	; 0
 2f8:	ef e5       	ldi	r30, 0x5F	; 95
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	80 68       	ori	r24, 0x80	; 128
 300:	8c 93       	st	X, r24

	//:INT0 ---> falling edge ---> reset timer
	MCUCR |= 1<<ISC01;
 302:	a5 e5       	ldi	r26, 0x55	; 85
 304:	b0 e0       	ldi	r27, 0x00	; 0
 306:	e5 e5       	ldi	r30, 0x55	; 85
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	82 60       	ori	r24, 0x02	; 2
 30e:	8c 93       	st	X, r24
	//:INT1 ---> rising edge ---> pause timer
	MCUCR |= 1<<ISC11 | 1<<ISC10;
 310:	a5 e5       	ldi	r26, 0x55	; 85
 312:	b0 e0       	ldi	r27, 0x00	; 0
 314:	e5 e5       	ldi	r30, 0x55	; 85
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	8c 60       	ori	r24, 0x0C	; 12
 31c:	8c 93       	st	X, r24
	//:INT2 ---> falling edge ---> resume timer
	MCUCSR &= ~(1<<ISC2);
 31e:	a4 e5       	ldi	r26, 0x54	; 84
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	e4 e5       	ldi	r30, 0x54	; 84
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	8f 7b       	andi	r24, 0xBF	; 191
 32a:	8c 93       	st	X, r24

	GICR |= (1<<INT0)|(1<<INT1)|(1<<INT2);
 32c:	ab e5       	ldi	r26, 0x5B	; 91
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	eb e5       	ldi	r30, 0x5B	; 91
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	80 6e       	ori	r24, 0xE0	; 224
 338:	8c 93       	st	X, r24
}
 33a:	cf 91       	pop	r28
 33c:	df 91       	pop	r29
 33e:	08 95       	ret

00000340 <initPushB>:

void initPushB(void)
{
 340:	df 93       	push	r29
 342:	cf 93       	push	r28
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
	DDRB &= ~(0b01111000);
 348:	a7 e3       	ldi	r26, 0x37	; 55
 34a:	b0 e0       	ldi	r27, 0x00	; 0
 34c:	e7 e3       	ldi	r30, 0x37	; 55
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	87 78       	andi	r24, 0x87	; 135
 354:	8c 93       	st	X, r24
	PORTB |= 0b01111000;
 356:	a8 e3       	ldi	r26, 0x38	; 56
 358:	b0 e0       	ldi	r27, 0x00	; 0
 35a:	e8 e3       	ldi	r30, 0x38	; 56
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	88 67       	ori	r24, 0x78	; 120
 362:	8c 93       	st	X, r24
}
 364:	cf 91       	pop	r28
 366:	df 91       	pop	r29
 368:	08 95       	ret

0000036a <PB_Press>:
uint8_t PB_Press()
{
 36a:	df 93       	push	r29
 36c:	cf 93       	push	r28
 36e:	0f 92       	push	r0
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
	if(PINB & (1<<PB3))
 374:	e6 e3       	ldi	r30, 0x36	; 54
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	88 2f       	mov	r24, r24
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	88 70       	andi	r24, 0x08	; 8
 380:	90 70       	andi	r25, 0x00	; 0
 382:	00 97       	sbiw	r24, 0x00	; 0
 384:	19 f0       	breq	.+6      	; 0x38c <PB_Press+0x22>
		return 1;//switch mode
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	89 83       	std	Y+1, r24	; 0x01
 38a:	25 c0       	rjmp	.+74     	; 0x3d6 <PB_Press+0x6c>
	if(PINB & (1<<PB4))
 38c:	e6 e3       	ldi	r30, 0x36	; 54
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	88 2f       	mov	r24, r24
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	80 71       	andi	r24, 0x10	; 16
 398:	90 70       	andi	r25, 0x00	; 0
 39a:	00 97       	sbiw	r24, 0x00	; 0
 39c:	19 f0       	breq	.+6      	; 0x3a4 <PB_Press+0x3a>
		return 2;//time select
 39e:	82 e0       	ldi	r24, 0x02	; 2
 3a0:	89 83       	std	Y+1, r24	; 0x01
 3a2:	19 c0       	rjmp	.+50     	; 0x3d6 <PB_Press+0x6c>
	if(PINB & (1<<PB5))
 3a4:	e6 e3       	ldi	r30, 0x36	; 54
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	88 2f       	mov	r24, r24
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	80 72       	andi	r24, 0x20	; 32
 3b0:	90 70       	andi	r25, 0x00	; 0
 3b2:	00 97       	sbiw	r24, 0x00	; 0
 3b4:	19 f0       	breq	.+6      	; 0x3bc <PB_Press+0x52>
		return 3;//increase
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	89 83       	std	Y+1, r24	; 0x01
 3ba:	0d c0       	rjmp	.+26     	; 0x3d6 <PB_Press+0x6c>
	if(PINB & (1<<PB6))
 3bc:	e6 e3       	ldi	r30, 0x36	; 54
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	88 2f       	mov	r24, r24
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	80 74       	andi	r24, 0x40	; 64
 3c8:	90 70       	andi	r25, 0x00	; 0
 3ca:	00 97       	sbiw	r24, 0x00	; 0
 3cc:	19 f0       	breq	.+6      	; 0x3d4 <PB_Press+0x6a>
		return 4;//decrease
 3ce:	84 e0       	ldi	r24, 0x04	; 4
 3d0:	89 83       	std	Y+1, r24	; 0x01
 3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <PB_Press+0x6c>
	return 0;//no button pressed
 3d4:	19 82       	std	Y+1, r1	; 0x01
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
}
 3d8:	0f 90       	pop	r0
 3da:	cf 91       	pop	r28
 3dc:	df 91       	pop	r29
 3de:	08 95       	ret

000003e0 <__vector_1>:
ISR(INT0_vect)
{
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	8f 93       	push	r24
 3ec:	af 93       	push	r26
 3ee:	bf 93       	push	r27
 3f0:	ef 93       	push	r30
 3f2:	ff 93       	push	r31
 3f4:	df 93       	push	r29
 3f6:	cf 93       	push	r28
 3f8:	cd b7       	in	r28, 0x3d	; 61
 3fa:	de b7       	in	r29, 0x3e	; 62
	//reset timer
	TCCR1B &= ~((1<<CS10)|(1<<CS11));
 3fc:	ae e4       	ldi	r26, 0x4E	; 78
 3fe:	b0 e0       	ldi	r27, 0x00	; 0
 400:	ee e4       	ldi	r30, 0x4E	; 78
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	8c 7f       	andi	r24, 0xFC	; 252
 408:	8c 93       	st	X, r24
	TCNT1 = 0;
 40a:	ec e4       	ldi	r30, 0x4C	; 76
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	11 82       	std	Z+1, r1	; 0x01
 410:	10 82       	st	Z, r1
	ON_OFF=0;
 412:	10 92 65 00 	sts	0x0065, r1
	time[0]=0;
 416:	10 92 62 00 	sts	0x0062, r1
	time[1]=0;
 41a:	10 92 63 00 	sts	0x0063, r1
	time[2]=0;
 41e:	10 92 64 00 	sts	0x0064, r1
}
 422:	cf 91       	pop	r28
 424:	df 91       	pop	r29
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	bf 91       	pop	r27
 42c:	af 91       	pop	r26
 42e:	8f 91       	pop	r24
 430:	0f 90       	pop	r0
 432:	0f be       	out	0x3f, r0	; 63
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <__vector_2>:
ISR(INT1_vect)
{
 43a:	1f 92       	push	r1
 43c:	0f 92       	push	r0
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	0f 92       	push	r0
 442:	11 24       	eor	r1, r1
 444:	2f 93       	push	r18
 446:	3f 93       	push	r19
 448:	4f 93       	push	r20
 44a:	5f 93       	push	r21
 44c:	6f 93       	push	r22
 44e:	7f 93       	push	r23
 450:	8f 93       	push	r24
 452:	9f 93       	push	r25
 454:	af 93       	push	r26
 456:	bf 93       	push	r27
 458:	ef 93       	push	r30
 45a:	ff 93       	push	r31
 45c:	df 93       	push	r29
 45e:	cf 93       	push	r28
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
	//:Timer clock stop
	TCCR1B &= ~((1<<CS10)|(1<<CS11));
 464:	ae e4       	ldi	r26, 0x4E	; 78
 466:	b0 e0       	ldi	r27, 0x00	; 0
 468:	ee e4       	ldi	r30, 0x4E	; 78
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	8c 7f       	andi	r24, 0xFC	; 252
 470:	8c 93       	st	X, r24
	ON_OFF=0;
 472:	10 92 65 00 	sts	0x0065, r1
	displaySeg2(0);
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 46 03 	call	0x68c	; 0x68c <displaySeg2>
}
 47c:	cf 91       	pop	r28
 47e:	df 91       	pop	r29
 480:	ff 91       	pop	r31
 482:	ef 91       	pop	r30
 484:	bf 91       	pop	r27
 486:	af 91       	pop	r26
 488:	9f 91       	pop	r25
 48a:	8f 91       	pop	r24
 48c:	7f 91       	pop	r23
 48e:	6f 91       	pop	r22
 490:	5f 91       	pop	r21
 492:	4f 91       	pop	r20
 494:	3f 91       	pop	r19
 496:	2f 91       	pop	r18
 498:	0f 90       	pop	r0
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	0f 90       	pop	r0
 49e:	1f 90       	pop	r1
 4a0:	18 95       	reti

000004a2 <__vector_3>:
ISR(INT2_vect)
{
 4a2:	1f 92       	push	r1
 4a4:	0f 92       	push	r0
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	0f 92       	push	r0
 4aa:	11 24       	eor	r1, r1
 4ac:	2f 93       	push	r18
 4ae:	3f 93       	push	r19
 4b0:	4f 93       	push	r20
 4b2:	5f 93       	push	r21
 4b4:	6f 93       	push	r22
 4b6:	7f 93       	push	r23
 4b8:	8f 93       	push	r24
 4ba:	9f 93       	push	r25
 4bc:	af 93       	push	r26
 4be:	bf 93       	push	r27
 4c0:	ef 93       	push	r30
 4c2:	ff 93       	push	r31
 4c4:	df 93       	push	r29
 4c6:	cf 93       	push	r28
 4c8:	cd b7       	in	r28, 0x3d	; 61
 4ca:	de b7       	in	r29, 0x3e	; 62
	//:timer clock start
	TCCR1B |= (1<<CS10) | (1<<CS11);
 4cc:	ae e4       	ldi	r26, 0x4E	; 78
 4ce:	b0 e0       	ldi	r27, 0x00	; 0
 4d0:	ee e4       	ldi	r30, 0x4E	; 78
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 81       	ld	r24, Z
 4d6:	83 60       	ori	r24, 0x03	; 3
 4d8:	8c 93       	st	X, r24
	ON_OFF=1;
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	80 93 65 00 	sts	0x0065, r24
	displaySeg2(state+1);
 4e0:	80 91 60 00 	lds	r24, 0x0060
 4e4:	8f 5f       	subi	r24, 0xFF	; 255
 4e6:	0e 94 46 03 	call	0x68c	; 0x68c <displaySeg2>
}
 4ea:	cf 91       	pop	r28
 4ec:	df 91       	pop	r29
 4ee:	ff 91       	pop	r31
 4f0:	ef 91       	pop	r30
 4f2:	bf 91       	pop	r27
 4f4:	af 91       	pop	r26
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	7f 91       	pop	r23
 4fc:	6f 91       	pop	r22
 4fe:	5f 91       	pop	r21
 500:	4f 91       	pop	r20
 502:	3f 91       	pop	r19
 504:	2f 91       	pop	r18
 506:	0f 90       	pop	r0
 508:	0f be       	out	0x3f, r0	; 63
 50a:	0f 90       	pop	r0
 50c:	1f 90       	pop	r1
 50e:	18 95       	reti

00000510 <sevSeg_Init>:

uint8_t sevSeg_VAL[6]={0};
uint8_t i =0;

void sevSeg_Init(void)
{
 510:	df 93       	push	r29
 512:	cf 93       	push	r28
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
	SEG_CTRL_DDR |= 0b00111111;
 518:	aa e3       	ldi	r26, 0x3A	; 58
 51a:	b0 e0       	ldi	r27, 0x00	; 0
 51c:	ea e3       	ldi	r30, 0x3A	; 58
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	80 81       	ld	r24, Z
 522:	8f 63       	ori	r24, 0x3F	; 63
 524:	8c 93       	st	X, r24
	SEG_CTRL_PORT |= 0b00111111;
 526:	ab e3       	ldi	r26, 0x3B	; 59
 528:	b0 e0       	ldi	r27, 0x00	; 0
 52a:	eb e3       	ldi	r30, 0x3B	; 59
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	8f 63       	ori	r24, 0x3F	; 63
 532:	8c 93       	st	X, r24
	SEG_DDR |= 15;
 534:	a4 e3       	ldi	r26, 0x34	; 52
 536:	b0 e0       	ldi	r27, 0x00	; 0
 538:	e4 e3       	ldi	r30, 0x34	; 52
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	8f 60       	ori	r24, 0x0F	; 15
 540:	8c 93       	st	X, r24
}
 542:	cf 91       	pop	r28
 544:	df 91       	pop	r29
 546:	08 95       	ret

00000548 <sevSeg_scnd_Init>:

void sevSeg_scnd_Init(void)
{
 548:	df 93       	push	r29
 54a:	cf 93       	push	r28
 54c:	cd b7       	in	r28, 0x3d	; 61
 54e:	de b7       	in	r29, 0x3e	; 62
	SEG2_DDR |= (1<<SEG2_P)|(1<<SEG2_M) | (1<<SEG2_K)|(1<<SEG2_H);
 550:	a1 e3       	ldi	r26, 0x31	; 49
 552:	b0 e0       	ldi	r27, 0x00	; 0
 554:	e1 e3       	ldi	r30, 0x31	; 49
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	80 81       	ld	r24, Z
 55a:	80 6f       	ori	r24, 0xF0	; 240
 55c:	8c 93       	st	X, r24
	SEG2_PORT &= ~((1<<SEG2_P)|(1<<SEG2_M) | (1<<SEG2_K)|(1<<SEG2_H));
 55e:	a2 e3       	ldi	r26, 0x32	; 50
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	e2 e3       	ldi	r30, 0x32	; 50
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	8f 70       	andi	r24, 0x0F	; 15
 56a:	8c 93       	st	X, r24
}
 56c:	cf 91       	pop	r28
 56e:	df 91       	pop	r29
 570:	08 95       	ret

00000572 <parseAll>:

void parseAll(void)
{
 572:	df 93       	push	r29
 574:	cf 93       	push	r28
 576:	cd b7       	in	r28, 0x3d	; 61
 578:	de b7       	in	r29, 0x3e	; 62
	sevSeg_VAL[0]=time[0]%10;
 57a:	80 91 62 00 	lds	r24, 0x0062
 57e:	9a e0       	ldi	r25, 0x0A	; 10
 580:	69 2f       	mov	r22, r25
 582:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__divmodqi4>
 586:	89 2f       	mov	r24, r25
 588:	80 93 6b 00 	sts	0x006B, r24
	sevSeg_VAL[1]=time[0]/10;
 58c:	80 91 62 00 	lds	r24, 0x0062
 590:	9a e0       	ldi	r25, 0x0A	; 10
 592:	69 2f       	mov	r22, r25
 594:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__divmodqi4>
 598:	80 93 6c 00 	sts	0x006C, r24
	sevSeg_VAL[2]=time[1]%10;
 59c:	80 91 63 00 	lds	r24, 0x0063
 5a0:	9a e0       	ldi	r25, 0x0A	; 10
 5a2:	69 2f       	mov	r22, r25
 5a4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__divmodqi4>
 5a8:	89 2f       	mov	r24, r25
 5aa:	80 93 6d 00 	sts	0x006D, r24
	sevSeg_VAL[3]=time[1]/10;
 5ae:	80 91 63 00 	lds	r24, 0x0063
 5b2:	9a e0       	ldi	r25, 0x0A	; 10
 5b4:	69 2f       	mov	r22, r25
 5b6:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__divmodqi4>
 5ba:	80 93 6e 00 	sts	0x006E, r24
	sevSeg_VAL[4]=time[2]%10;
 5be:	80 91 64 00 	lds	r24, 0x0064
 5c2:	9a e0       	ldi	r25, 0x0A	; 10
 5c4:	69 2f       	mov	r22, r25
 5c6:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__divmodqi4>
 5ca:	89 2f       	mov	r24, r25
 5cc:	80 93 6f 00 	sts	0x006F, r24
	sevSeg_VAL[5]=time[2]/10;
 5d0:	80 91 64 00 	lds	r24, 0x0064
 5d4:	9a e0       	ldi	r25, 0x0A	; 10
 5d6:	69 2f       	mov	r22, r25
 5d8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__divmodqi4>
 5dc:	80 93 70 00 	sts	0x0070, r24
}
 5e0:	cf 91       	pop	r28
 5e2:	df 91       	pop	r29
 5e4:	08 95       	ret

000005e6 <display>:

void display(void)
{
 5e6:	df 93       	push	r29
 5e8:	cf 93       	push	r28
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
	parseAll();
 5ee:	0e 94 b9 02 	call	0x572	; 0x572 <parseAll>
	for(i=0;i<6;i++)
 5f2:	10 92 71 00 	sts	0x0071, r1
 5f6:	42 c0       	rjmp	.+132    	; 0x67c <display+0x96>
	{
		SEG_CTRL_PORT |= 1<<i;
 5f8:	ab e3       	ldi	r26, 0x3B	; 59
 5fa:	b0 e0       	ldi	r27, 0x00	; 0
 5fc:	eb e3       	ldi	r30, 0x3B	; 59
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	48 2f       	mov	r20, r24
 604:	80 91 71 00 	lds	r24, 0x0071
 608:	28 2f       	mov	r18, r24
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	02 c0       	rjmp	.+4      	; 0x616 <display+0x30>
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	2a 95       	dec	r18
 618:	e2 f7       	brpl	.-8      	; 0x612 <display+0x2c>
 61a:	84 2b       	or	r24, r20
 61c:	8c 93       	st	X, r24
		SEG_PORT = (SEG_PORT&0xF0) | (sevSeg_VAL[i]&0x0F);
 61e:	a5 e3       	ldi	r26, 0x35	; 53
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	e5 e3       	ldi	r30, 0x35	; 53
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	28 2f       	mov	r18, r24
 62a:	20 7f       	andi	r18, 0xF0	; 240
 62c:	80 91 71 00 	lds	r24, 0x0071
 630:	88 2f       	mov	r24, r24
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	fc 01       	movw	r30, r24
 636:	e5 59       	subi	r30, 0x95	; 149
 638:	ff 4f       	sbci	r31, 0xFF	; 255
 63a:	80 81       	ld	r24, Z
 63c:	8f 70       	andi	r24, 0x0F	; 15
 63e:	82 2b       	or	r24, r18
 640:	8c 93       	st	X, r24
		delayms(3);
 642:	83 e0       	ldi	r24, 0x03	; 3
 644:	0e 94 29 04 	call	0x852	; 0x852 <delayms>
		SEG_CTRL_PORT &= ~(1<<i);
 648:	ab e3       	ldi	r26, 0x3B	; 59
 64a:	b0 e0       	ldi	r27, 0x00	; 0
 64c:	eb e3       	ldi	r30, 0x3B	; 59
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	80 81       	ld	r24, Z
 652:	48 2f       	mov	r20, r24
 654:	80 91 71 00 	lds	r24, 0x0071
 658:	28 2f       	mov	r18, r24
 65a:	30 e0       	ldi	r19, 0x00	; 0
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	02 2e       	mov	r0, r18
 662:	02 c0       	rjmp	.+4      	; 0x668 <display+0x82>
 664:	88 0f       	add	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	0a 94       	dec	r0
 66a:	e2 f7       	brpl	.-8      	; 0x664 <display+0x7e>
 66c:	80 95       	com	r24
 66e:	84 23       	and	r24, r20
 670:	8c 93       	st	X, r24
}

void display(void)
{
	parseAll();
	for(i=0;i<6;i++)
 672:	80 91 71 00 	lds	r24, 0x0071
 676:	8f 5f       	subi	r24, 0xFF	; 255
 678:	80 93 71 00 	sts	0x0071, r24
 67c:	80 91 71 00 	lds	r24, 0x0071
 680:	86 30       	cpi	r24, 0x06	; 6
 682:	08 f4       	brcc	.+2      	; 0x686 <display+0xa0>
 684:	b9 cf       	rjmp	.-142    	; 0x5f8 <display+0x12>
		SEG_CTRL_PORT |= 1<<i;
		SEG_PORT = (SEG_PORT&0xF0) | (sevSeg_VAL[i]&0x0F);
		delayms(3);
		SEG_CTRL_PORT &= ~(1<<i);
	}
}
 686:	cf 91       	pop	r28
 688:	df 91       	pop	r29
 68a:	08 95       	ret

0000068c <displaySeg2>:

void displaySeg2(uint8_t tri)
{
 68c:	df 93       	push	r29
 68e:	cf 93       	push	r28
 690:	00 d0       	rcall	.+0      	; 0x692 <displaySeg2+0x6>
 692:	0f 92       	push	r0
 694:	cd b7       	in	r28, 0x3d	; 61
 696:	de b7       	in	r29, 0x3e	; 62
 698:	89 83       	std	Y+1, r24	; 0x01
	switch(tri)
 69a:	89 81       	ldd	r24, Y+1	; 0x01
 69c:	28 2f       	mov	r18, r24
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	3b 83       	std	Y+3, r19	; 0x03
 6a2:	2a 83       	std	Y+2, r18	; 0x02
 6a4:	8a 81       	ldd	r24, Y+2	; 0x02
 6a6:	9b 81       	ldd	r25, Y+3	; 0x03
 6a8:	81 30       	cpi	r24, 0x01	; 1
 6aa:	91 05       	cpc	r25, r1
 6ac:	01 f1       	breq	.+64     	; 0x6ee <displaySeg2+0x62>
 6ae:	2a 81       	ldd	r18, Y+2	; 0x02
 6b0:	3b 81       	ldd	r19, Y+3	; 0x03
 6b2:	22 30       	cpi	r18, 0x02	; 2
 6b4:	31 05       	cpc	r19, r1
 6b6:	61 f0       	breq	.+24     	; 0x6d0 <displaySeg2+0x44>
 6b8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ba:	9b 81       	ldd	r25, Y+3	; 0x03
 6bc:	00 97       	sbiw	r24, 0x00	; 0
 6be:	29 f5       	brne	.+74     	; 0x70a <displaySeg2+0x7e>
	{
	case 0:
		SEG2_PORT |= (1<<SEG2_P)|(1<<SEG2_M) | (1<<SEG2_K)|(1<<SEG2_H);
 6c0:	a2 e3       	ldi	r26, 0x32	; 50
 6c2:	b0 e0       	ldi	r27, 0x00	; 0
 6c4:	e2 e3       	ldi	r30, 0x32	; 50
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	80 6f       	ori	r24, 0xF0	; 240
 6cc:	8c 93       	st	X, r24
 6ce:	1d c0       	rjmp	.+58     	; 0x70a <displaySeg2+0x7e>
		break;
	case 2:
		SEG2_PORT |=(1<<SEG2_M) | (1<<SEG2_K);
 6d0:	a2 e3       	ldi	r26, 0x32	; 50
 6d2:	b0 e0       	ldi	r27, 0x00	; 0
 6d4:	e2 e3       	ldi	r30, 0x32	; 50
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	80 81       	ld	r24, Z
 6da:	80 6c       	ori	r24, 0xC0	; 192
 6dc:	8c 93       	st	X, r24
		SEG2_PORT &= ~((1<<SEG2_P)|(1<<SEG2_H));
 6de:	a2 e3       	ldi	r26, 0x32	; 50
 6e0:	b0 e0       	ldi	r27, 0x00	; 0
 6e2:	e2 e3       	ldi	r30, 0x32	; 50
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	80 81       	ld	r24, Z
 6e8:	8f 7c       	andi	r24, 0xCF	; 207
 6ea:	8c 93       	st	X, r24
 6ec:	0e c0       	rjmp	.+28     	; 0x70a <displaySeg2+0x7e>
		break;
	case 1:
		SEG2_PORT |=(1<<SEG2_P) | (1<<SEG2_H);
 6ee:	a2 e3       	ldi	r26, 0x32	; 50
 6f0:	b0 e0       	ldi	r27, 0x00	; 0
 6f2:	e2 e3       	ldi	r30, 0x32	; 50
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	80 81       	ld	r24, Z
 6f8:	80 63       	ori	r24, 0x30	; 48
 6fa:	8c 93       	st	X, r24
		SEG2_PORT &= ~((1<<SEG2_M)|(1<<SEG2_K));
 6fc:	a2 e3       	ldi	r26, 0x32	; 50
 6fe:	b0 e0       	ldi	r27, 0x00	; 0
 700:	e2 e3       	ldi	r30, 0x32	; 50
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	80 81       	ld	r24, Z
 706:	8f 73       	andi	r24, 0x3F	; 63
 708:	8c 93       	st	X, r24
		break;
	}
}
 70a:	0f 90       	pop	r0
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	cf 91       	pop	r28
 712:	df 91       	pop	r29
 714:	08 95       	ret

00000716 <t1_Init>:

#include "timer.h"
uint8_t o=0;

void t1_Init(void)
{
 716:	df 93       	push	r29
 718:	cf 93       	push	r28
 71a:	cd b7       	in	r28, 0x3d	; 61
 71c:	de b7       	in	r29, 0x3e	; 62
	TCCR1A |= 1<<FOC1A;
 71e:	af e4       	ldi	r26, 0x4F	; 79
 720:	b0 e0       	ldi	r27, 0x00	; 0
 722:	ef e4       	ldi	r30, 0x4F	; 79
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	80 81       	ld	r24, Z
 728:	88 60       	ori	r24, 0x08	; 8
 72a:	8c 93       	st	X, r24
	TCCR1B |= 1<<WGM12;
 72c:	ae e4       	ldi	r26, 0x4E	; 78
 72e:	b0 e0       	ldi	r27, 0x00	; 0
 730:	ee e4       	ldi	r30, 0x4E	; 78
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	80 81       	ld	r24, Z
 736:	88 60       	ori	r24, 0x08	; 8
 738:	8c 93       	st	X, r24
	OCR1A = 15625;
 73a:	ea e4       	ldi	r30, 0x4A	; 74
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	89 e0       	ldi	r24, 0x09	; 9
 740:	9d e3       	ldi	r25, 0x3D	; 61
 742:	91 83       	std	Z+1, r25	; 0x01
 744:	80 83       	st	Z, r24
	TIMSK |= 1<< OCIE1A;
 746:	a9 e5       	ldi	r26, 0x59	; 89
 748:	b0 e0       	ldi	r27, 0x00	; 0
 74a:	e9 e5       	ldi	r30, 0x59	; 89
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 81       	ld	r24, Z
 750:	80 61       	ori	r24, 0x10	; 16
 752:	8c 93       	st	X, r24
	TCNT1 = 0;
 754:	ec e4       	ldi	r30, 0x4C	; 76
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	11 82       	std	Z+1, r1	; 0x01
 75a:	10 82       	st	Z, r1
}
 75c:	cf 91       	pop	r28
 75e:	df 91       	pop	r29
 760:	08 95       	ret

00000762 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 762:	1f 92       	push	r1
 764:	0f 92       	push	r0
 766:	0f b6       	in	r0, 0x3f	; 63
 768:	0f 92       	push	r0
 76a:	11 24       	eor	r1, r1
 76c:	8f 93       	push	r24
 76e:	df 93       	push	r29
 770:	cf 93       	push	r28
 772:	cd b7       	in	r28, 0x3d	; 61
 774:	de b7       	in	r29, 0x3e	; 62
	if (state == 1)
 776:	80 91 60 00 	lds	r24, 0x0060
 77a:	81 30       	cpi	r24, 0x01	; 1
 77c:	31 f5       	brne	.+76     	; 0x7ca <__vector_7+0x68>
	{
		time[0]++;
 77e:	80 91 62 00 	lds	r24, 0x0062
 782:	8f 5f       	subi	r24, 0xFF	; 255
 784:	80 93 62 00 	sts	0x0062, r24
		if (time[0] > 59)
 788:	80 91 62 00 	lds	r24, 0x0062
 78c:	8c 33       	cpi	r24, 0x3C	; 60
 78e:	3c f0       	brlt	.+14     	; 0x79e <__vector_7+0x3c>
		{
			time[0] = 0;
 790:	10 92 62 00 	sts	0x0062, r1
			time[1]++;
 794:	80 91 63 00 	lds	r24, 0x0063
 798:	8f 5f       	subi	r24, 0xFF	; 255
 79a:	80 93 63 00 	sts	0x0063, r24
		}
		if (time[1] > 59)
 79e:	80 91 63 00 	lds	r24, 0x0063
 7a2:	8c 33       	cpi	r24, 0x3C	; 60
 7a4:	3c f0       	brlt	.+14     	; 0x7b4 <__vector_7+0x52>
		{
			time[1] = 0;
 7a6:	10 92 63 00 	sts	0x0063, r1
			time[2]++;
 7aa:	80 91 64 00 	lds	r24, 0x0064
 7ae:	8f 5f       	subi	r24, 0xFF	; 255
 7b0:	80 93 64 00 	sts	0x0064, r24
		}
		if (time[2] > 99)
 7b4:	80 91 64 00 	lds	r24, 0x0064
 7b8:	84 36       	cpi	r24, 0x64	; 100
 7ba:	74 f1       	brlt	.+92     	; 0x818 <__vector_7+0xb6>
		{
			time[0] = 0;
 7bc:	10 92 62 00 	sts	0x0062, r1
			time[1] = 0;
 7c0:	10 92 63 00 	sts	0x0063, r1
			time[2] = 0;
 7c4:	10 92 64 00 	sts	0x0064, r1
 7c8:	27 c0       	rjmp	.+78     	; 0x818 <__vector_7+0xb6>
		}
	}
	else
	{
		time[0]--;
 7ca:	80 91 62 00 	lds	r24, 0x0062
 7ce:	81 50       	subi	r24, 0x01	; 1
 7d0:	80 93 62 00 	sts	0x0062, r24
		if(time[0]<0)
 7d4:	80 91 62 00 	lds	r24, 0x0062
 7d8:	88 23       	and	r24, r24
 7da:	44 f4       	brge	.+16     	; 0x7ec <__vector_7+0x8a>
		{
			time[0]=59;
 7dc:	8b e3       	ldi	r24, 0x3B	; 59
 7de:	80 93 62 00 	sts	0x0062, r24
			time[1]--;
 7e2:	80 91 63 00 	lds	r24, 0x0063
 7e6:	81 50       	subi	r24, 0x01	; 1
 7e8:	80 93 63 00 	sts	0x0063, r24
		}
		if(time[1]<0)
 7ec:	80 91 63 00 	lds	r24, 0x0063
 7f0:	88 23       	and	r24, r24
 7f2:	44 f4       	brge	.+16     	; 0x804 <__vector_7+0xa2>
		{
			time[1]=59;
 7f4:	8b e3       	ldi	r24, 0x3B	; 59
 7f6:	80 93 63 00 	sts	0x0063, r24
			time[2]--;
 7fa:	80 91 64 00 	lds	r24, 0x0064
 7fe:	81 50       	subi	r24, 0x01	; 1
 800:	80 93 64 00 	sts	0x0064, r24
		}
		if(time[2]<0)
 804:	80 91 64 00 	lds	r24, 0x0064
 808:	88 23       	and	r24, r24
 80a:	34 f4       	brge	.+12     	; 0x818 <__vector_7+0xb6>
		{
			time[0] = 0;
 80c:	10 92 62 00 	sts	0x0062, r1
			time[1] = 0;
 810:	10 92 63 00 	sts	0x0063, r1
			time[2] = 0;
 814:	10 92 64 00 	sts	0x0064, r1
		}
	}
}
 818:	cf 91       	pop	r28
 81a:	df 91       	pop	r29
 81c:	8f 91       	pop	r24
 81e:	0f 90       	pop	r0
 820:	0f be       	out	0x3f, r0	; 63
 822:	0f 90       	pop	r0
 824:	1f 90       	pop	r1
 826:	18 95       	reti

00000828 <t0_Init>:

void t0_Init(void)
{
 828:	df 93       	push	r29
 82a:	cf 93       	push	r28
 82c:	cd b7       	in	r28, 0x3d	; 61
 82e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= (1<<FOC0) | (1<<WGM01) | (1<<CS01);
 830:	a3 e5       	ldi	r26, 0x53	; 83
 832:	b0 e0       	ldi	r27, 0x00	; 0
 834:	e3 e5       	ldi	r30, 0x53	; 83
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	80 81       	ld	r24, Z
 83a:	8a 68       	ori	r24, 0x8A	; 138
 83c:	8c 93       	st	X, r24
	OCR0 = 125;
 83e:	ec e5       	ldi	r30, 0x5C	; 92
 840:	f0 e0       	ldi	r31, 0x00	; 0
 842:	8d e7       	ldi	r24, 0x7D	; 125
 844:	80 83       	st	Z, r24
	TCNT0 = 0;
 846:	e2 e5       	ldi	r30, 0x52	; 82
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	10 82       	st	Z, r1
}
 84c:	cf 91       	pop	r28
 84e:	df 91       	pop	r29
 850:	08 95       	ret

00000852 <delayms>:

void delayms(uint8_t d)
{
 852:	df 93       	push	r29
 854:	cf 93       	push	r28
 856:	0f 92       	push	r0
 858:	cd b7       	in	r28, 0x3d	; 61
 85a:	de b7       	in	r29, 0x3e	; 62
 85c:	89 83       	std	Y+1, r24	; 0x01
	for(o=0;o<d;o++)
 85e:	10 92 72 00 	sts	0x0072, r1
 862:	18 c0       	rjmp	.+48     	; 0x894 <__stack+0x35>
	{
		TCNT0 = 0;
 864:	e2 e5       	ldi	r30, 0x52	; 82
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	10 82       	st	Z, r1
		TIFR |= 1<<OCF0;
 86a:	a8 e5       	ldi	r26, 0x58	; 88
 86c:	b0 e0       	ldi	r27, 0x00	; 0
 86e:	e8 e5       	ldi	r30, 0x58	; 88
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	80 81       	ld	r24, Z
 874:	82 60       	ori	r24, 0x02	; 2
 876:	8c 93       	st	X, r24
		while(!(TIFR & 1<<OCF0));
 878:	e8 e5       	ldi	r30, 0x58	; 88
 87a:	f0 e0       	ldi	r31, 0x00	; 0
 87c:	80 81       	ld	r24, Z
 87e:	88 2f       	mov	r24, r24
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	82 70       	andi	r24, 0x02	; 2
 884:	90 70       	andi	r25, 0x00	; 0
 886:	00 97       	sbiw	r24, 0x00	; 0
 888:	b9 f3       	breq	.-18     	; 0x878 <__stack+0x19>
	TCNT0 = 0;
}

void delayms(uint8_t d)
{
	for(o=0;o<d;o++)
 88a:	80 91 72 00 	lds	r24, 0x0072
 88e:	8f 5f       	subi	r24, 0xFF	; 255
 890:	80 93 72 00 	sts	0x0072, r24
 894:	90 91 72 00 	lds	r25, 0x0072
 898:	89 81       	ldd	r24, Y+1	; 0x01
 89a:	98 17       	cp	r25, r24
 89c:	18 f3       	brcs	.-58     	; 0x864 <__stack+0x5>
	{
		TCNT0 = 0;
		TIFR |= 1<<OCF0;
		while(!(TIFR & 1<<OCF0));
	}
}
 89e:	0f 90       	pop	r0
 8a0:	cf 91       	pop	r28
 8a2:	df 91       	pop	r29
 8a4:	08 95       	ret

000008a6 <__divmodqi4>:
 8a6:	87 fb       	bst	r24, 7
 8a8:	08 2e       	mov	r0, r24
 8aa:	06 26       	eor	r0, r22
 8ac:	87 fd       	sbrc	r24, 7
 8ae:	81 95       	neg	r24
 8b0:	67 fd       	sbrc	r22, 7
 8b2:	61 95       	neg	r22
 8b4:	05 d0       	rcall	.+10     	; 0x8c0 <__udivmodqi4>
 8b6:	0e f4       	brtc	.+2      	; 0x8ba <__divmodqi4_1>
 8b8:	91 95       	neg	r25

000008ba <__divmodqi4_1>:
 8ba:	07 fc       	sbrc	r0, 7
 8bc:	81 95       	neg	r24

000008be <__divmodqi4_exit>:
 8be:	08 95       	ret

000008c0 <__udivmodqi4>:
 8c0:	99 1b       	sub	r25, r25
 8c2:	79 e0       	ldi	r23, 0x09	; 9
 8c4:	04 c0       	rjmp	.+8      	; 0x8ce <__udivmodqi4_ep>

000008c6 <__udivmodqi4_loop>:
 8c6:	99 1f       	adc	r25, r25
 8c8:	96 17       	cp	r25, r22
 8ca:	08 f0       	brcs	.+2      	; 0x8ce <__udivmodqi4_ep>
 8cc:	96 1b       	sub	r25, r22

000008ce <__udivmodqi4_ep>:
 8ce:	88 1f       	adc	r24, r24
 8d0:	7a 95       	dec	r23
 8d2:	c9 f7       	brne	.-14     	; 0x8c6 <__udivmodqi4_loop>
 8d4:	80 95       	com	r24
 8d6:	08 95       	ret

000008d8 <_exit>:
 8d8:	f8 94       	cli

000008da <__stop_program>:
 8da:	ff cf       	rjmp	.-2      	; 0x8da <__stop_program>
